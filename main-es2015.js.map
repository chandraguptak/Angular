{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/provision/create-provision.component.html","webpack:///./src/app/provision/list-provision.component.html","webpack:///./src/app/Services/data.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/provision/create-provision.component.css","webpack:///./src/app/provision/create-provision.component.ts","webpack:///./src/app/provision/list-provision.component.css","webpack:///./src/app/provision/list-provision.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"container\\\">\\n  <nav class=\\\"navbar navbar-default\\\">\\n    <ul class=\\\"nav navbar-nav\\\">\\n      <li>\\n        <a routerLinkActive='active' routerLink='list' >List-All</a>\\n      </li>\\n      <li>\\n        <a routerLinkActive='active' routerLink='create' >Create-One</a>\\n      </li>\\n    </ul>\\n  </nav>\\n  <router-outlet></router-outlet>\\n</div>\"","module.exports = \"<form [(formGroup)]=\\\"provisionForm\\\"  class=\\\"form-horizontal\\\">\\n  <div class=\\\"panel panel-primary\\\">\\n    <div class=\\\"panel-heading\\\">\\n      <h3 class=\\\"panel-title\\\">Create Employee</h3>\\n    </div>\\n    <div class=\\\"panel-body\\\">\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': provisionForm.get('ItemName').errors &&\\n        (provisionForm.get('ItemName').touched || provisionForm.get('ItemName').dirty)}\\\">\\n\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"ItemName\\\">Item Name</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input id=\\\"ItemName\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"ItemName\\\">\\n\\n          <span class=\\\"help=block\\\" *ngIf=\\\"provisionForm.get('ItemName').errors &&\\n            (provisionForm.get('ItemName').touched ||provisionForm.get('ItemName').dirty)\\\">\\n            <span *ngIf=\\\"provisionForm.get('ItemName').errors.required\\\">\\n              Full Name is Required\\n            </span>\\n            <span *ngIf=\\\"(provisionForm.get('ItemName').errors.minlength ||\\n              provisionForm.get('ItemName').errors.maxlength)\\\">\\n              Full Name should be between 2 to 10 charcters\\n            </span>\\n          </span>\\n        </div>\\n      </div>\\n\\n      <!-- Qty input element -->\\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"Itemquantity\\\">Qty</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input id=\\\"Itemquantity\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"Itemquantity\\\">\\n        </div>\\n      </div>\\n\\n      <!-- <div class=\\\"dropdown\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"Orderby\\\">Orderby</label>\\n            <ul class=\\\"dropdown-menu\\\">\\n              <li>Sumita</li>\\n              <li>Chandra</li>\\n            </ul>\\n        </div> -->\\n        <!-- <div class=\\\"dropdown\\\">\\n            <label class=\\\"col-sm-2 control-label\\\" for=\\\"Orderby\\\">Orderby</label>\\n            <button class=\\\"btn btn-primary dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\">Orderby\\n            <span class=\\\"caret\\\"></span></button>\\n            <ul class=\\\"dropdown-menu\\\">\\n                <li>Sumita</li>\\n                <li>Chandra</li>\\n            </ul>\\n          </div> -->\\n<!-- \\n      <div formGroupName=\\\"skills\\\">\\n\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"skillName\\\">\\n            Skill\\n          </label>\\n          <div class=\\\"col-sm-4\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"skillName\\\" formControlName=\\\"skillName\\\" placeholder=\\\"Name\\\">\\n          </div>\\n          <div class=\\\"col-sm-4\\\">\\n            <input type=\\\"text\\\" placeholder=\\\"Experience in Years\\\" class=\\\"form-control\\\"\\n              formControlName=\\\"ExperienceInYears\\\">\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"col-md-2 control-label\\\">Proficiency</label>\\n          <div class=\\\"col-md-8\\\">\\n            <label class=\\\"radio-inline\\\">\\n              <input id=\\\"proficiency\\\" type=\\\"radio\\\" value=\\\"beginner\\\" formControlName=\\\"proficiency\\\">Beginner\\n            </label>\\n            <label class=\\\"radio-inline\\\">\\n              <input id=\\\"proficiency\\\" type=\\\"radio\\\" value=\\\"intermediate\\\" formControlName=\\\"proficiency\\\">Intermediate\\n            </label>\\n            <label class=\\\"radio-inline\\\">\\n              <input id=\\\"proficiency\\\" type=\\\"radio\\\" value=\\\"advanced\\\" formControlName=\\\"proficiency\\\">Advanced\\n            </label>\\n          </div>\\n        </div>\\n      </div> -->\\n\\n    </div>\\n    <div class=\\\"panel-footer\\\">\\n      <div class=\\\"btn-toolbar\\\">\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" (click)=\\\"onSubmit()\\\">Save</button>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n<app-list-provision></app-list-provision>\"","module.exports = \"<form [formGroup]=\\\"\\\">\\n  <table class=\\\"table\\\">\\n      <tr>       \\n        <th scope=\\\"col\\\">\\n            Item\\n          </th>\\n          <th scope=\\\"col\\\">\\n              Qty\\n            </th>\\n            <th scope=\\\"col\\\">\\n                Ordered By\\n              </th>\\n      </tr>\\n      <tr *ngFor=\\\"let data of DataFromAPi\\\">\\n        <td>{{ data.Itemname }}</td>\\n        <td> {{ data.Itemquantity }}</td>\\n        <td> {{ data.Enteredby }}</td>\\n      </tr>\\n    </table>\\n    \\n</form>\"","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DataService {\n\n    constructor(private _http: HttpClient) { }\n  // tslint:disable-next-line:no-inferrable-types\n  baseUrl: string = 'https://homeprovisionmanagementapi20190612025500.azurewebsites.net/api/Provision';\n \n\n    getProvision() {\n      return this._http.get<any>(this.baseUrl + '/5');\n    }\n\n   saveProvision(provisionForm: any) {\n    return  this._http.post(this.baseUrl,  JSON.stringify(provisionForm), httpOptions);\n    }\n  }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {ListProvisionComponent} from './provision/list-provision.component';\nimport {CreateProvisionComponent} from './provision/create-provision.component';\n\nconst routes: Routes = [\n{path: 'list', component: ListProvisionComponent},\n{path: 'create', component: CreateProvisionComponent},\n{path: '', redirectTo: '/list', pathMatch: 'full'}\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'chandra-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'HomeProvisionManagement Apps';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms'\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CreateProvisionComponent } from './provision/create-provision.component';\nimport { ListProvisionComponent } from './provision/list-provision.component';\nimport { DataService } from './Services/data.service';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateProvisionComponent,\n    ListProvisionComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n     HttpClientModule \n  ],\n  providers: [DataService],\n  bootstrap: [AppComponent],\n  exports: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb3Zpc2lvbi9jcmVhdGUtcHJvdmlzaW9uLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { DataService } from '../Services/data.service';\n\n\n@Component({\n  selector: 'app-create-provision',\n  templateUrl: './create-provision.component.html',\n  styleUrls: ['./create-provision.component.css']\n})\nexport class CreateProvisionComponent implements OnInit {\n  provisionForm: FormGroup;\n  // validationMessages = {\n  //   'fullName': {\n  //     'required': 'Full Name is Required ',\n  //     'minlength': 'Full Name should be greater than 2 ',\n  //     'maxlength': 'Full Name should be less than 10 ',\n  //   },\n  //   'email': {\n  //     'required': 'Email is required'\n  //   },\n  //   'skillName': {\n  //     'required': 'skill Name is required'\n  //   },\n  //   'ExperienceInYears': {\n  //     'required': 'Experience in Years is required'\n  //   },\n  //   'proficiency': {\n  //     'required': 'proficiency is required'\n  //   }\n  // };\n  // forErrors = {\n  //   'fullName': '',\n  //   'ContactPreference': '',\n  //   'email': '',\n  //   'skillName': '',\n  //   'ExperienceInYears': '',\n  //   'proficiency': ''\n  // };\n\n\n  constructor(private fb: FormBuilder, private dbService : DataService) {  }\n\n  ngOnInit() {\n    this.provisionForm = this.fb.group({\n      ItemName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(20)]],\n      Itemquantity: ['', [Validators.required]],\n      OrderBy : ['', [Validators.required]]\n    });\n\n    // this.provisionForm.get('fullName').valueChanges.subscribe(\n    //   (value: string) => {\n    //     this.fullNameLength = value.length;\n    //   }\n    // );\n    // FormControl\n    // this.provisionForm = new FormGroup(\n    // {\n    //     fullName: new FormControl(),\n    //     email: new FormControl(),\n    //     skills : new FormGroup({\n    //      skillName : new FormControl(),\n    //      ExperienceInYears : new FormControl(),\n    //      proficiency : new FormControl()\n    //     })\n    // });\n  }\n\n  logValidationErrors(group: FormGroup): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n         //abstractControl.disable();\n      }\n\n    }\n\n    );\n\n  }\n\n  onLoadDataClick(): void {\n    this.dbService.getProvision().subscribe(data => {\n      this.provisionForm.setValue({\n          fullName: data[0].fullName,\n          email: data[0].email\n        });\n\n  });\n\n    // this.provisionForm.setValue({\n    //   fullName: 'Chandra Gupta',\n    //   email: 'chandragupta@gmail.com',\n    //   skills: {\n    //     skillName: 'c#',\n    //     ExperienceInYears: 6,\n    //     proficiency: 'advanced'\n    //   }\n    // });\n    // this.logValidationErrors(this.provisionForm);\n  }\n  onSubmit() {\n    this.dbService.saveProvision(this.provisionForm.value).subscribe();\n    \n  }\n\n  // ContactPreferenceChange(selectedValue: string) {\n  //   const phoneControl = this.provisionForm.get('phone');\n  //   if (selectedValue === 'phone') {\n  //     phoneControl.setValidators(Validators.required);\n  //   }\n  // }\n}\n\n// function emailDomain(control: AbstractControl): { [Key: string]: any } | null {\n//   const email: string = control.value;\n//   const domain = email.substring(email.lastIndexOf('@') + 1);\n//   if (email === '' || domain.toLowerCase() === 'chandra') {\n//     return null;\n//   } else {\n//     return { 'emailDomain': true };\n//   }\n// }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb3Zpc2lvbi9saXN0LXByb3Zpc2lvbi5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../Services/data.service';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-list-provision',\n  templateUrl: './list-provision.component.html',\n  styleUrls: ['./list-provision.component.css']\n})\nexport class ListProvisionComponent implements OnInit {\n  DataFromAPi: any[];\n  provisionFormData: FormGroup;\n  constructor(private dbService: DataService) {  }\n\n  ngOnInit() {\n    this.dbService.getProvision().subscribe(data => {\n      this.DataFromAPi = data;\n   });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}